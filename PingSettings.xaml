<Controls:MetroWindow 
     xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
    x:Class="myRouter.PingSettings"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:myRouter"
        mc:Ignorable="d"
     BorderBrush="Black"
    BorderThickness="1"
         ResizeMode="NoResize"
    WindowTitleBrush="White"
     NonActiveWindowTitleBrush="White"
                       WindowCloseButtonStyle="{DynamicResource CleanCloseWindowButtonStyle}"
                       WindowMinButtonStyle="{DynamicResource CleanCloseWindowButtonStyle}"
       
          SizeToContent="Height" Height="Auto" Width="550" Closing="Window_Closing">
   
    <Window.Resources>

        <Style x:Key="CleanCloseWindowButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MetroWindowButtonStyle}">

            <Setter Property="Foreground"
                Value="Black" />
            <Style.Triggers>


                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FFBFBFBF" />
                    <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="#FF8D8D8D" />
                </Trigger>

            </Style.Triggers>
        </Style>
        <Style 
           x:Key="restartButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="120" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#4598aa"  />
            <Setter Property="Foreground" Value="White"  />
        </Style>

        <Style 
           x:Key="reconnectButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="80" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#06a319"  />
            <Setter Property="Foreground" Value="White"  />
        </Style>


        <Style TargetType="Label" x:Key="RouterStyle" >
            <Setter Property="FontWeight" Value="Regular"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="20" />

            <Setter Property="Foreground" Value="#858080"  />
        </Style>

        <Style TargetType="Label" x:Key="statusStyle">
            <Setter Property="FontWeight" Value="Regular"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="19" />

            <Setter Property="Foreground" Value="#858080"  />
        </Style>

        <Style TargetType="Label" x:Key="valueStyle">
            <Setter Property="FontWeight" Value="Regular"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="18" />

            <Setter Property="Foreground" Value="#b1b1b1"  />
        </Style>


        <Style TargetType="Label" x:Key="titleStyle">

            <Setter Property="FontWeight" Value="Regular"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="18" />


            <Setter Property="BorderBrush" Value="#1FA3FF"  />
        </Style>
        <Style TargetType="Separator">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Rectangle Height="{TemplateBinding Height}"  
                           Fill="Gray" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style 
           x:Key="blueButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="120" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#FF29AFFF"  />
            <Setter Property="Foreground" Value="White"  />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FF1D8DD1"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style 
           x:Key="windowButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="120" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="White"  />
            <Setter Property="Foreground" Value="White"  />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FFCECED4"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style 
           x:Key="grayButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="80" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#FF9C9C9C"  />
            <Setter Property="Foreground" Value="White"  />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FF8B8B8B"/>
                </Trigger>
            </Style.Triggers>

        </Style>
        <Style 
           x:Key="settingButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="80" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="Transparent"  />
            <Setter Property="Foreground" Value="Black"  />
        </Style>
        <Style 
           x:Key="greenButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="80" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#FF00B800"  />
            <Setter Property="Foreground" Value="White"  />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FF009700"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style 
           x:Key="redButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="80" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#FFFF4646" />
            <Setter Property="Foreground" Value="White"  />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FFFF2D2D"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style 
           x:Key="orangeButton" BasedOn="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" TargetType="Button">
            <Setter Property="Width" Value="80" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="#FFF1B761"  />
            <Setter Property="Foreground" Value="White"  />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#FFEEA02E"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Label" x:Key="noConnection">

            <Setter Property="FontWeight" Value="Regular"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="18" />
            <Setter Property="Foreground" Value="White"  />

            <Setter Property="BorderBrush" Value="White"  />
        </Style>
        <Style TargetType="Label" x:Key="title">

            <Setter Property="FontWeight" Value="Regular"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="12" />


            <Setter Property="BorderBrush" Value="#1FA3FF"  />
        </Style>


        <Style TargetType="Label" x:Key="values">
            <Setter Property="FontWeight" Value="Regular"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="14" />

            <Setter Property="Foreground" Value="#FFA6A6A6"  />
        </Style>
        <Style TargetType="Label" x:Key="titles">


            <Setter Property="FontWeight" Value="Regular"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="14" />


            <Setter Property="BorderBrush" Value="#1FA3FF"  />
        </Style>

        <Style TargetType="Label" x:Key="info">

            <Setter Property="FontWeight" Value="Normal"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="15" />

            <Setter Property="Opacity" Value="0.5"  />
            <Setter Property="BorderBrush" Value="#1FA3FF"  />
        </Style>

        <Style TargetType="Label" x:Key="error">

            <Setter Property="FontWeight" Value="Normal"  />
            <Setter Property="FontFamily" Value="Myriad Pro Regular" />
            <Setter Property="FontSize" Value="15" />
            <Setter Property="Foreground" Value="Red"  />
            <Setter Property="Opacity" Value="0.5"  />

        </Style>


    </Window.Resources>
    <Controls:MetroWindow.LeftWindowCommands >
        <Controls:WindowCommands>
            <Label  Content="Ping Settings"     Style="{StaticResource ResourceKey=titleStyle}"/>
        </Controls:WindowCommands>
    </Controls:MetroWindow.LeftWindowCommands>
    <StackPanel Orientation="Vertical">

        <StackPanel Margin="10,0,0,0" Orientation="Vertical"  >
          
            <Label  Content="Add or remove ip's "  Margin="0,-15,0,0"      Style="{StaticResource ResourceKey=info}" />
        </StackPanel>
        <DataGrid  ItemsSource="{Binding Network.Pings,Mode=TwoWay}"  ScrollViewer.CanContentScroll="True"   Height="150" x:Name="pingList"  Width="500" AutoGenerateColumns="False" CanUserAddRows="false"  CanUserReorderColumns="False" CanUserResizeColumns="False" 
          CanUserResizeRows="False" CanUserSortColumns="False" Margin="-19,0,-8,0">
            <DataGrid.Columns>

                <DataGridCheckBoxColumn Header="Select" Binding="{Binding Selected, UpdateSourceTrigger=PropertyChanged}" />
                <DataGridTextColumn Header="Name" Width="*" Binding="{Binding Name}" />
                <DataGridTextColumn Header="Ip adress" Width="*" Binding="{Binding Ip}" />
                <DataGridTextColumn Header="Country" Width="*" Binding="{Binding Country}" />
                <DataGridTextColumn Header="Value" Binding="{Binding Value}"  />
                <DataGridCheckBoxColumn Header="Active" Binding="{Binding Active,UpdateSourceTrigger=PropertyChanged}" ></DataGridCheckBoxColumn>

            </DataGrid.Columns>
        </DataGrid>
        <Separator Height="10" Opacity="0"></Separator>
        <StackPanel Orientation="Horizontal" Margin="15,0,0,0" >

            <Button Content="Select All" Margin="5,0,0,0"   Width="80"  Style="{StaticResource grayButton}"  HorizontalAlignment="Left" Click="selectAll" ></Button>
            <Separator Width="5"  Opacity="0"></Separator>
            <Button Content="Deselect All"   Width="80"  Style="{StaticResource grayButton}"  HorizontalAlignment="Left" Click="deselectAll" ></Button>
            <Separator Width="5"  Opacity="0"></Separator>
            <Button Content="Remove"   Width="50"  Style="{StaticResource redButton}"  HorizontalAlignment="Left" Click="remove" ></Button>
            <Separator Width="5"  Opacity="0"></Separator>
            <Button Content="Add"   Width="50"  Style="{StaticResource blueButton}"  HorizontalAlignment="Left" Click="add" ></Button>
            <Separator Width="5"  Opacity="0"></Separator>
            <Button Content="close"   Width="50"  Style="{StaticResource grayButton}"  HorizontalAlignment="Left" Click="close"  ></Button>
        </StackPanel>
        <Separator Height="20" Opacity="0"></Separator>

    </StackPanel>
</Controls:MetroWindow>
